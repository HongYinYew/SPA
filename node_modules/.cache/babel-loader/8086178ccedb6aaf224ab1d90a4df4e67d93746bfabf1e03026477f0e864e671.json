{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hong Yin\\\\Desktop\\\\Work Files\\\\Internship\\\\AHAM Capital\\\\Assignment\\\\React\\\\customer-management-spa\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport RegisterCustomer from \"./components/RegisterCustomer\";\nimport CustomerList from \"./components/CustomerList\";\nimport CustomerDetail from \"./components/CustomerDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const handleRegister = newCustomerID => {\n    // Optionally, you can fetch the newly registered customer details and update the list\n    // However, for simplicity, we'll just fetch the full list of customers again.\n    fetchCustomers();\n  };\n  const handleViewCustomer = customer => {\n    setSelectedCustomer(customer);\n  };\n  const handleDeleteCustomer = id => {\n    // Clear the selected customer if the one being viewed is deleted\n    if (selectedCustomer && selectedCustomer.id === id) {\n      setSelectedCustomer(null);\n    }\n    // Fetch the updated customer list after deletion\n    fetchCustomers();\n  };\n  const fetchCustomers = async () => {\n    try {\n      const response = await axios.get(\"/customer-list\");\n      setCustomers(response.data);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(RegisterCustomer, {\n      onRegister: handleRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomerList, {\n      onViewCustomer: handleViewCustomer,\n      onDeleteCustomer: handleDeleteCustomer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), selectedCustomer && /*#__PURE__*/_jsxDEV(CustomerDetail, {\n      customer: selectedCustomer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"GAF2mSrFQjmR3DDGaPq5Oc8ITjw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","RegisterCustomer","CustomerList","CustomerDetail","jsxDEV","_jsxDEV","App","_s","selectedCustomer","setSelectedCustomer","handleRegister","newCustomerID","fetchCustomers","handleViewCustomer","customer","handleDeleteCustomer","id","response","get","setCustomers","data","error","console","children","onRegister","fileName","_jsxFileName","lineNumber","columnNumber","onViewCustomer","onDeleteCustomer","_c","$RefreshReg$"],"sources":["C:/Users/Hong Yin/Desktop/Work Files/Internship/AHAM Capital/Assignment/React/customer-management-spa/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport RegisterCustomer from \"./components/RegisterCustomer\";\nimport CustomerList from \"./components/CustomerList\";\nimport CustomerDetail from \"./components/CustomerDetail\";\n\nconst App = () => {\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n  const handleRegister = (newCustomerID) => {\n    // Optionally, you can fetch the newly registered customer details and update the list\n    // However, for simplicity, we'll just fetch the full list of customers again.\n    fetchCustomers();\n  };\n\n  const handleViewCustomer = (customer) => {\n    setSelectedCustomer(customer);\n  };\n\n  const handleDeleteCustomer = (id) => {\n    // Clear the selected customer if the one being viewed is deleted\n    if (selectedCustomer && selectedCustomer.id === id) {\n      setSelectedCustomer(null);\n    }\n    // Fetch the updated customer list after deletion\n    fetchCustomers();\n  };\n\n  const fetchCustomers = async () => {\n    try {\n      const response = await axios.get(\"/customer-list\");\n      setCustomers(response.data);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <RegisterCustomer onRegister={handleRegister} />\n      <CustomerList\n        onViewCustomer={handleViewCustomer}\n        onDeleteCustomer={handleDeleteCustomer}\n      />\n      {selectedCustomer && <CustomerDetail customer={selectedCustomer} />}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAMW,cAAc,GAAIC,aAAa,IAAK;IACxC;IACA;IACAC,cAAc,CAAC,CAAC;EAClB,CAAC;EAED,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;IACvCL,mBAAmB,CAACK,QAAQ,CAAC;EAC/B,CAAC;EAED,MAAMC,oBAAoB,GAAIC,EAAE,IAAK;IACnC;IACA,IAAIR,gBAAgB,IAAIA,gBAAgB,CAACQ,EAAE,KAAKA,EAAE,EAAE;MAClDP,mBAAmB,CAAC,IAAI,CAAC;IAC3B;IACA;IACAG,cAAc,CAAC,CAAC;EAClB,CAAC;EAED,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,gBAAgB,CAAC;MAClDC,YAAY,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACJ,gBAAgB;MAACuB,UAAU,EAAEd;IAAe;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChDvB,OAAA,CAACH,YAAY;MACX2B,cAAc,EAAEhB,kBAAmB;MACnCiB,gBAAgB,EAAEf;IAAqB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,EACDpB,gBAAgB,iBAAIH,OAAA,CAACF,cAAc;MAACW,QAAQ,EAAEN;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEV,CAAC;AAACrB,EAAA,CAzCID,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA2CT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}